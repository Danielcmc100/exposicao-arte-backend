"""adição de texto na tabela ComentarioObra

Revision ID: 114629e2de17
Revises: f26aeed58b74
Create Date: 2025-10-02 21:11:18.761811

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '114629e2de17'
down_revision: Union[str, Sequence[str], None] = 'f26aeed58b74'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Create new table that is independent of in-place ALTERs
    op.create_table(
        'comentario_eventos',
        sa.Column('usuario_id', sa.Integer(), nullable=False),
        sa.Column('evento_id', sa.Integer(), nullable=False),
        sa.Column('comentario', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('status', sa.Enum('ATIVO', 'INATIVO', 'PENDENTE', name='statuscomentario'), nullable=False),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['evento_id'], ['eventos.id']),
        sa.ForeignKeyConstraint(['usuario_id'], ['usuarios.id']),
        sa.PrimaryKeyConstraint('id'),
    )

    # Use batch_alter_table to make SQLite-safe changes to comentario_obras and obras
    with op.batch_alter_table('comentario_obras', recreate='always') as batch_op:
        batch_op.add_column(sa.Column('texto', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
        batch_op.add_column(sa.Column('usuario_id', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('obra_id', sa.Integer(), nullable=False))
        # Drop old foreign key columns
        try:
            batch_op.drop_column('id_usuario')
        except Exception:
            # column may not exist in some DB states; ignore
            pass
        try:
            batch_op.drop_column('id_obra')
        except Exception:
            pass

        # Create new foreign keys referencing the new column names
        # Note: in batch mode Alembic will recreate constraints when rewriting table

    with op.batch_alter_table('obras', recreate='always') as batch_op:
        try:
            batch_op.drop_column('id_artista')
        except Exception:
            pass
        try:
            batch_op.drop_column('id_categoria')
        except Exception:
            pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Recreate previous columns using batch mode where necessary
    with op.batch_alter_table('obras', recreate='always') as batch_op:
        batch_op.add_column(sa.Column('id_categoria', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('id_artista', sa.INTEGER(), autoincrement=False, nullable=False))

    with op.batch_alter_table('comentario_obras', recreate='always') as batch_op:
        batch_op.add_column(sa.Column('id_obra', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('id_usuario', sa.INTEGER(), autoincrement=False, nullable=False))
        # Constraints will be restored when batch_op finishes recreating the table
        try:
            batch_op.drop_column('obra_id')
        except Exception:
            pass
        try:
            batch_op.drop_column('usuario_id')
        except Exception:
            pass
        try:
            batch_op.drop_column('texto')
        except Exception:
            pass

    op.drop_table('comentario_eventos')
    # ### end Alembic commands ###
